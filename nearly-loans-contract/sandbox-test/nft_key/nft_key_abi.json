{
  "schema_version": "0.4.0",
  "metadata": {
    "name": "nft-key",
    "version": "0.1.0",
    "build": {
      "compiler": "rustc 1.78.0",
      "builder": "cargo-near cargo-near-build 0.2.0"
    },
    "wasm_hash": "FNnVFBLiwumwfTiBtELgZKj1RyUHkGg7QCktWvCfH4gT"
  },
  "body": {
    "functions": [
      {
        "name": "ckt_approval_id_for",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      {
        "name": "ckt_approve",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      {
        "name": "ckt_approve_call",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "msg",
              "type_schema": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/PromiseOrValueNullable_uint32"
          }
        }
      },
      {
        "name": "ckt_approve_callback",
        "kind": "call",
        "modifiers": [
          "private"
        ],
        "params": {
          "serialization_type": "borsh",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "declaration": "u32",
                "definitions": {
                  "u32": {
                    "Primitive": 4
                  }
                }
              }
            },
            {
              "name": "account_id",
              "type_schema": {
                "declaration": "AccountId",
                "definitions": {
                  "AccountId": {
                    "Struct": [
                      "String"
                    ]
                  },
                  "String": {
                    "Sequence": {
                      "length_width": 4,
                      "length_range": {
                        "start": 0,
                        "end": 4294967295
                      },
                      "elements": "u8"
                    }
                  },
                  "u8": {
                    "Primitive": 1
                  }
                }
              }
            },
            {
              "name": "approval_id",
              "type_schema": {
                "declaration": "u32",
                "definitions": {
                  "u32": {
                    "Primitive": 4
                  }
                }
              }
            }
          ]
        },
        "callbacks": [
          {
            "serialization_type": "json",
            "type_schema": {
              "type": "boolean"
            }
          }
        ],
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      {
        "name": "ckt_public_key_for",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "type_schema": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/PromiseOrValueString"
          }
        }
      },
      {
        "name": "ckt_revoke",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        }
      },
      {
        "name": "ckt_revoke_all",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "ckt_revoke_call",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "msg",
              "type_schema": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/PromiseOrValueNull"
          }
        }
      },
      {
        "name": "ckt_revoke_callback",
        "kind": "view",
        "modifiers": [
          "private"
        ]
      },
      {
        "name": "ckt_scheme_oid",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "ckt_sign_hash",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "type_schema": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            {
              "name": "payload",
              "type_schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                }
              }
            },
            {
              "name": "approval_id",
              "type_schema": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/PromiseOrValueString"
          }
        }
      },
      {
        "name": "contract_source_metadata",
        "kind": "view"
      },
      {
        "name": "get_signer_contract_id",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/AccountIdRef"
          }
        }
      },
      {
        "name": "mint",
        "kind": "call",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/Promise"
          }
        }
      },
      {
        "name": "mint_callback",
        "kind": "call",
        "modifiers": [
          "private"
        ],
        "params": {
          "serialization_type": "borsh",
          "args": [
            {
              "name": "id",
              "type_schema": {
                "declaration": "u32",
                "definitions": {
                  "u32": {
                    "Primitive": 4
                  }
                }
              }
            },
            {
              "name": "predecessor",
              "type_schema": {
                "declaration": "AccountId",
                "definitions": {
                  "AccountId": {
                    "Struct": [
                      "String"
                    ]
                  },
                  "String": {
                    "Sequence": {
                      "length_width": 4,
                      "length_range": {
                        "start": 0,
                        "end": 4294967295
                      },
                      "elements": "u8"
                    }
                  },
                  "u8": {
                    "Primitive": 1
                  }
                }
              }
            },
            {
              "name": "storage_usage_start",
              "type_schema": {
                "declaration": "u64",
                "definitions": {
                  "u64": {
                    "Primitive": 8
                  }
                }
              }
            }
          ]
        },
        "callbacks": [
          {
            "serialization_type": "json",
            "type_schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        ],
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      {
        "name": "new",
        "kind": "call",
        "modifiers": [
          "init"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "signer_contract_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        }
      },
      {
        "name": "nft_approve",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "msg",
              "type_schema": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/PromiseOrValueNull"
          }
        }
      },
      {
        "name": "nft_is_approved",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "approved_account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "approval_id",
              "type_schema": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "nft_metadata",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/ContractMetadata"
          }
        }
      },
      {
        "name": "nft_resolve_transfer",
        "kind": "call",
        "modifiers": [
          "private"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "previous_owner_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "receiver_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "approved_account_ids",
              "type_schema": {
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "nft_revoke",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        }
      },
      {
        "name": "nft_revoke_all",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            }
          ]
        }
      },
      {
        "name": "nft_supply_for_owner",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "nft_token",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "anyOf": [
              {
                "$ref": "#/definitions/Token"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      {
        "name": "nft_tokens",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "from_index",
              "type_schema": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            {
              "name": "limit",
              "type_schema": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Token"
            }
          }
        }
      },
      {
        "name": "nft_tokens_for_owner",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "from_index",
              "type_schema": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            {
              "name": "limit",
              "type_schema": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Token"
            }
          }
        }
      },
      {
        "name": "nft_total_supply",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "nft_transfer",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "receiver_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "approval_id",
              "type_schema": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            {
              "name": "memo",
              "type_schema": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          ]
        }
      },
      {
        "name": "nft_transfer_call",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "receiver_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            },
            {
              "name": "token_id",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "approval_id",
              "type_schema": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            },
            {
              "name": "memo",
              "type_schema": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            {
              "name": "msg",
              "type_schema": {
                "type": "string"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/PromiseOrValueBoolean"
          }
        }
      },
      {
        "name": "set_signer_contract_id",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        }
      },
      {
        "name": "sign_callback",
        "kind": "view",
        "modifiers": [
          "private"
        ],
        "callbacks": [
          {
            "serialization_type": "json",
            "type_schema": {
              "$ref": "#/definitions/SignResult"
            }
          }
        ],
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "storage_balance_bounds",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/StorageBalanceBounds"
          }
        }
      },
      {
        "name": "storage_balance_of",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "$ref": "#/definitions/AccountId"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "anyOf": [
              {
                "$ref": "#/definitions/StorageBalance"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      {
        "name": "storage_deposit",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AccountId"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            {
              "name": "registration_only",
              "type_schema": {
                "type": [
                  "boolean",
                  "null"
                ]
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/StorageBalance"
          }
        }
      },
      {
        "name": "storage_unregister",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "force",
              "type_schema": {
                "type": [
                  "boolean",
                  "null"
                ]
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "storage_withdraw",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "amount",
              "type_schema": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/StorageBalance"
          }
        }
      }
    ],
    "root_schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "String",
      "type": "string",
      "definitions": {
        "AccountId": {
          "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
          "type": "string"
        },
        "AccountIdRef": {
          "description": "Account identifier. This is the human readable UTF-8 string which is used internally to index accounts on the network and their respective state.\n\nThis is the \"referenced\" version of the account ID. It is to [`AccountId`] what [`str`] is to [`String`], and works quite similarly to [`Path`]. Like with [`str`] and [`Path`], you can't have a value of type `AccountIdRef`, but you can have a reference like `&AccountIdRef` or `&mut AccountIdRef`.\n\nThis type supports zero-copy deserialization offered by [`serde`](https://docs.rs/serde/), but cannot do the same for [`borsh`](https://docs.rs/borsh/) since the latter does not support zero-copy.\n\n# Examples ``` use near_account_id::{AccountId, AccountIdRef}; use std::convert::{TryFrom, TryInto};\n\n// Construction let alice = AccountIdRef::new(\"alice.near\").unwrap(); assert!(AccountIdRef::new(\"invalid.\").is_err()); ```\n\n[`FromStr`]: std::str::FromStr [`Path`]: std::path::Path",
          "type": "string"
        },
        "ContractMetadata": {
          "description": "Non-fungible token contract metadata.",
          "type": "object",
          "required": [
            "name",
            "spec",
            "symbol"
          ],
          "properties": {
            "base_uri": {
              "description": "Gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs.",
              "type": [
                "string",
                "null"
              ]
            },
            "icon": {
              "description": "Data URI for the contract icon.",
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "description": "The name of the NFT contract, e.g. \"Mochi Rising — Digital Edition\" or \"Metaverse 3\".",
              "type": "string"
            },
            "reference": {
              "description": "URL to a JSON file with more info about the NFT contract.",
              "type": [
                "string",
                "null"
              ]
            },
            "reference_hash": {
              "description": "Base-64-encoded SHA-256 hash of the referenced JSON file. Required if `reference` is present.",
              "type": [
                "string",
                "null"
              ]
            },
            "spec": {
              "description": "The metadata specification version. Essentially a version like \"nft-2.0.0\", replacing \"2.0.0\" with the implemented version of NEP-177.",
              "type": "string"
            },
            "symbol": {
              "description": "The symbol of the NFT contract, e.g. \"MOCHI\" or \"M3\".",
              "type": "string"
            }
          }
        },
        "Promise": true,
        "PromiseOrValueBoolean": {
          "type": "boolean"
        },
        "PromiseOrValueNull": {
          "type": "null"
        },
        "PromiseOrValueNullable_uint32": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "PromiseOrValueString": {
          "type": "string"
        },
        "SignResult": {
          "type": "object",
          "required": [
            "big_r",
            "s"
          ],
          "properties": {
            "big_r": {
              "type": "string"
            },
            "s": {
              "type": "string"
            }
          }
        },
        "StorageBalance": {
          "description": "An account's storage balance.",
          "type": "object",
          "required": [
            "available",
            "total"
          ],
          "properties": {
            "available": {
              "description": "The amount of storage balance that is available for use.",
              "type": "string"
            },
            "total": {
              "description": "The total amount of storage balance.",
              "type": "string"
            }
          }
        },
        "StorageBalanceBounds": {
          "description": "Storage balance bounds.",
          "type": "object",
          "required": [
            "min"
          ],
          "properties": {
            "max": {
              "description": "The maximum storage balance.",
              "type": [
                "string",
                "null"
              ]
            },
            "min": {
              "description": "The minimum storage balance.",
              "type": "string"
            }
          }
        },
        "Token": {
          "type": "object",
          "required": [
            "owner_id",
            "token_id"
          ],
          "properties": {
            "owner_id": {
              "$ref": "#/definitions/AccountId"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": true
        }
      }
    }
  }
}