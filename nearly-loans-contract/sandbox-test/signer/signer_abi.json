{
  "schema_version": "0.4.0",
  "metadata": {
    "name": "signer",
    "version": "0.1.0",
    "build": {
      "compiler": "rustc 1.78.0",
      "builder": "cargo-near cargo-near-build 0.2.0"
    },
    "wasm_hash": "4fooWTHinrefxhsapjxr2Md9DXaXFquToao7vj6iApoc"
  },
  "body": {
    "functions": [
      {
        "name": "contract_source_metadata",
        "kind": "view"
      },
      {
        "name": "derived_public_key",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "path",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "predecessor",
              "type_schema": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AccountId"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "latest_key_version",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      {
        "name": "public_key",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "sign",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "request",
              "type_schema": {
                "$ref": "#/definitions/SignRequest"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/PromiseOrValueSignResult"
          }
        }
      }
    ],
    "root_schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "String",
      "type": "string",
      "definitions": {
        "AccountId": {
          "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
          "type": "string"
        },
        "PromiseOrValueSignResult": {
          "type": "object",
          "required": [
            "big_r",
            "s"
          ],
          "properties": {
            "big_r": {
              "type": "string"
            },
            "s": {
              "type": "string"
            }
          }
        },
        "SignRequest": {
          "type": "object",
          "required": [
            "key_version",
            "path",
            "payload"
          ],
          "properties": {
            "key_version": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "path": {
              "type": "string"
            },
            "payload": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 32,
              "minItems": 32
            }
          }
        }
      }
    }
  }
}